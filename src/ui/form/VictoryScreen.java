package ui.form;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import ui.ViewModel;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.*;
import java.util.Locale;

public class VictoryScreen {

    private JPanel victoryScreenPanel;
    private JButton backToBuildButton;
    private JButton backToLoginButton;
    private JButton closeGameButton;
    private JButton restartGameButton;
    private JLabel resultText;

    public JPanel getVictoryPanel() {
        return victoryScreenPanel;
    }


    public static void main(String[] args) {
        JFrame frame = new JFrame("VictoryScreen");
        frame.setContentPane(new VictoryScreen().victoryScreenPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);

    }

    public VictoryScreen() {
        var controller = ViewModel.getInstance().getController();

        // initialize buttons

        closeGameButton.addActionListener(e -> System.exit(0));

        restartGameButton.addActionListener(e -> {
            controller.restartGame();
            controller.ShowGameScreenForced();
        });

        backToBuildButton.addActionListener(e -> controller.ShowBuildScreen());

        backToLoginButton.addActionListener(e -> controller.ShowLoginScreen());


        victoryScreenPanel.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentShown(ComponentEvent e) {
                resultText.setText(ViewModel.getInstance().getGameResult());
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        victoryScreenPanel = new JPanel();
        victoryScreenPanel.setLayout(new GridLayoutManager(5, 1, new Insets(20, 20, 20, 20), -1, -1));
        backToBuildButton = new JButton();
        backToBuildButton.setBorderPainted(false);
        backToBuildButton.setContentAreaFilled(false);
        backToBuildButton.setIcon(new ImageIcon(getClass().getResource("/button-icons/buildmodeIcon.png")));
        backToBuildButton.setLabel("");
        backToBuildButton.setRolloverIcon(new ImageIcon(getClass().getResource("/button-icons/buildmodeSelected.png")));
        backToBuildButton.setRolloverSelectedIcon(new ImageIcon(getClass().getResource("/button-icons/buildmodeSelected.png")));
        backToBuildButton.setText("");
        victoryScreenPanel.add(backToBuildButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        backToLoginButton = new JButton();
        backToLoginButton.setBorderPainted(false);
        backToLoginButton.setContentAreaFilled(false);
        backToLoginButton.setIcon(new ImageIcon(getClass().getResource("/button-icons/loginIcon.png")));
        backToLoginButton.setLabel("");
        backToLoginButton.setRolloverIcon(new ImageIcon(getClass().getResource("/button-icons/loginSelected.png")));
        backToLoginButton.setRolloverSelectedIcon(new ImageIcon(getClass().getResource("/button-icons/loginSelected.png")));
        backToLoginButton.setText("");
        victoryScreenPanel.add(backToLoginButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        restartGameButton = new JButton();
        restartGameButton.setBorderPainted(false);
        restartGameButton.setContentAreaFilled(false);
        restartGameButton.setIcon(new ImageIcon(getClass().getResource("/button-icons/restartIcon.png")));
        restartGameButton.setLabel("");
        restartGameButton.setRolloverIcon(new ImageIcon(getClass().getResource("/button-icons/restartSelected.png")));
        restartGameButton.setRolloverSelectedIcon(new ImageIcon(getClass().getResource("/button-icons/restartSelected.png")));
        restartGameButton.setText("");
        victoryScreenPanel.add(restartGameButton, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        closeGameButton = new JButton();
        closeGameButton.setBorderPainted(false);
        closeGameButton.setContentAreaFilled(false);
        closeGameButton.setIcon(new ImageIcon(getClass().getResource("/button-icons/exitIcon.png")));
        closeGameButton.setLabel("");
        closeGameButton.setRolloverIcon(new ImageIcon(getClass().getResource("/button-icons/exitSelected.png")));
        closeGameButton.setRolloverSelectedIcon(new ImageIcon(getClass().getResource("/button-icons/exitSelected.png")));
        closeGameButton.setText("");
        victoryScreenPanel.add(closeGameButton, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        resultText = new JLabel();
        Font resultTextFont = this.$$$getFont$$$(null, -1, 48, resultText.getFont());
        if (resultTextFont != null) resultText.setFont(resultTextFont);
        resultText.setName("resultText");
        resultText.setText("");
        resultText.setVisible(true);
        victoryScreenPanel.add(resultText, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return victoryScreenPanel;
    }

}

